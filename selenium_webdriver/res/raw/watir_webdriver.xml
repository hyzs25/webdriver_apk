<?xml version="1.0" encoding="utf-8"?>
    <java>
   	  <c title="启动浏览器" pos = "1">


require 'watir-webdriver'

b = Watir::Browser.new(:chrome)

   	  </c>
   	  <c title="关闭浏览器" pos = "2">


require 'watir-webdriver'

b = Watir::Browser.new :chrome
sleep 2
puts 'browser will be closed'
b.close 
puts 'browser is closed'

   	  </c>
  	  <c title="最大化浏览器" pos = "3">


require 'watir-webdriver'

b = Watir::Browser.new :chrome
sleep 2
puts 'maximize browser'
b.window.maximize
sleep 2
puts 'close browser'
b.close

  	  </c>
  	  <c title="定制浏览器大小" pos="4">


require 'watir-webdriver'

b = Watir::Browser.new :chrome

b.window.resize_to(320, 480)
b.goto '3g.qq.com'

sleep 3
b.close

  	  </c>
  	  <c title="访问链接" pos="5">

require 'watir-webdriver'

b = Watir::Browser.new :chrome
url = 'http://www.baidu.com'
puts "now access #{url}"
b.goto url

sleep 5

b.close

  	  </c>
  	  <c title="打印当前页面的title及url" pos="6">


require 'watir-webdriver'

b = Watir::Browser.new :chrome
url = 'http://www.baidu.com'
puts "now access #{url}"
b.goto url

puts "title of current page is #{b.title}"
puts "url of current page is #{b.url}"
sleep 1

b.close 
  	      
  	  </c>
  	   <c title="前进和后退" pos="7">


require 'watir-webdriver'

b = Watir::Browser.new :chrome
first_url = 'http://www.baidu.com'
puts "now access #{first_url}"
b.goto(first_url)
sleep 1
second_url = 'http://www.news.baidu.com'
puts "now access #{second_url}"
b.goto(second_url)
sleep 1

puts "back to #{first_url}"
b.back()
sleep 1
puts "forward to #{second_url}"
b.forward()
sleep 1
b.close

  	   </c>
  	    <c title="简单的对象定位"  pos="8">


 require 'watir-webdriver'

b = Watir::Browser.new :chrome
file_path = 'file:///' + File.expand_path(File.join('.', 'form.html'))

b.goto file_path

# by id
b.text_field(:id, 'inputEmail').click

# by name
b.text_field(:name, 'password').click

# by tagname
puts b.form().attribute_value(:class)

# by class_name
e = b.div(:class, 'controls')
b.execute_script('$(arguments[0]).fadeOut().fadeIn()', e)
sleep 1

# by link text
link = b.link(:text, 'register')
b.execute_script('$(arguments[0]).fadeOut().fadeIn()', link)
sleep 1

# by partial link text
link = b.link(:text, /reg/)
b.execute_script('$(arguments[0]).fadeOut().fadeIn()', link)
sleep 1

# by css selector
div = b.element(:css, '.controls')
b.execute_script('$(arguments[0]).fadeOut().fadeIn()', div)
sleep 1

sleep 2
b.close

讨论

上面例子里由于html文件中引用了jquery，所以在执行js时可以使用jquery的$()及fadeIn()等方法。如果你测试的页面没用包含jquery的话，这些方法是无效的。</c>
  	     <c title="定位一组对象" pos="9">
#encoding: utf-8
require 'watir-webdriver'

b = Watir::Browser.new :chrome
file_path = 'file:///' + File.expand_path(File.join('.', 'checkbox.html'))

b.goto file_path

# 选择所有的checkbox并全部勾上
#dr.find_elements(:css, 'input[type=checkbox]').each {|c| c.click}
b.checkboxes.each { |c| c.set(true) }
b.refresh
sleep 1

# 打印当前页面上有多少个checkbox
#puts dr.find_elements(:css, 'input[type=checkbox]').size
puts b.checkboxes.size

# 选择页面上所有的input，然后从中过滤出所有的checkbox并勾选之
# 在watir-webdriver中是不需要这样做的
=begin
dr.find_elements(:tag_name, 'input').each do |input|
        input.click if input.attribute(:type) == 'checkbox'
end 
sleep 1
=end

# 把页面上最后1个checkbox的勾给去掉
#dr.find_elements(:css, 'input[type=checkbox]').last.click
b.checkboxes.last.click

sleep 2
b.close
  	     </c>
  	     <c title="层级定位"  pos="10">
#encoding: utf-8
require 'watir-webdriver'

b = Watir::Browser.new :chrome
file_path = 'file:///' + File.expand_path(File.join('.', 'level_locate.html'))

b.goto file_path

b.link(:text, 'Link1').click

=begin
wait = Selenium::WebDriver::Wait.new({:timeout => 30})
wait.until { dr.find_element(:id, 'dropdown1').displayed? }
menu = dr.find_element(:id, 'dropdown1').find_element(:link_text, 'Another action')
dr.action.move_to(menu).perform()
=end


menu = b.ul(:id, 'dropdown1').when_present.link(:text, 'Another action')
menu.focus

sleep 2
b.close
  	     </c>
  	     <c title="操作测试对象" pos="11">
#encoding: utf-8
require 'watir-webdriver'

b = Watir::Browser.new :chrome
file_path = 'file:///' + File.expand_path(File.join('.', 'operate_element.html'))

b.goto file_path
#click
b.link(:text, 'Link1').click
sleep(1)
b.link(:text, 'Link1').click

#set
element = b.text_field(:name, 'q')
element.set 'waitr-webdriver'
sleep(1)

#clear
element.clear

sleep(2)
b.close
  	     </c>
  	     <c title="send keys模拟按键输入" pos="12">
#encoding: utf-8
require 'selenium-webdriver'

dr = Selenium::WebDriver.for :chrome
file_path = 'file:///' + File.expand_path(File.join('.', 'send_keys.html'))
dr.get file_path

# copy content of A
dr.find_element(:id, 'A').send_keys([:control, 'a'])
dr.find_element(:id, 'A').send_keys([:control, 'x'])
sleep(1)

# paste to B
dr.find_element(:id, 'B').send_keys([:control, 'v'])
sleep(1)

# send keys to A
dr.find_element(:id, 'A').send_keys('watir', '-', 'webdriver', :space, 'is', :space, 'better')
sleep(2)

dr.quit()

  	     </c>
  	     <c title="处理button group" pos="13">
#encoding: utf-8
require 'selenium-webdriver'

dr = Selenium::WebDriver.for :chrome
file_path = 'file:///' + File.expand_path(File.join('.', 'button_group.html'))
dr.get file_path

# 定位text是second的按钮
second_btn = dr.find_element(:class, 'btn-group').find_elements(:class, 'btn').detect {|btn| btn.text == 'second'}
second_btn.click()
sleep(2)

dr.quit()

  	     </c>
  	     <c title="处理button dropdown" pos="14">
场景

button dropdown就是把按钮和下拉菜单弄到了一起。处理这种对象的思路一般是先点击这个按钮，等待下拉菜单显示出来，然后使用层级定位方法来获取下拉菜单中的具体项。

代码

下面的代码演示了如何找到watir-webdriver这个菜单项。其处理方法是先点击info按钮，然后等到下拉菜单出现后定位下拉菜单的ul元素，再定位ul元素中link text为watir-webdriver的link，并点击之。

button_dropdown.java

    import java.io.File;

    import org.openqa.selenium.By;
    import org.openqa.selenium.WebDriver;
    import org.openqa.selenium.chrome.ChromeDriver;
    import org.openqa.selenium.support.ui.ExpectedCondition;
    import org.openqa.selenium.support.ui.WebDriverWait;


    public class ButtonDropdown {

        public static void main(String[] args) throws InterruptedException {
            WebDriver dr = new ChromeDriver();

            File file = new File("src/button_dropdown.html");
            String filePath = "file:///" + file.getAbsolutePath();
            System.out.printf("now accesss %s \n", filePath);

            dr.get(filePath);
            Thread.sleep(1000);

    //      定位text是watir-webdriver的下拉菜单
    //      首先显示下拉菜单
            dr.findElement(By.linkText("Info")).click();

            (new WebDriverWait(dr, 10)).until(new ExpectedCondition&lt;Boolean&gt;() {
                public Boolean apply(WebDriver d){
                    return d.findElement(By.className("dropdown-menu")).isDisplayed();
                }
            });

    //      通过ul再层级定位
            dr.findElement(By.className("dropdown-menu")).findElement(By.linkText("watir-webdriver")).click();

            Thread.sleep(1000);
            System.out.println("browser will be close");
            dr.quit();  
        }

    }

  	     </c>
  	     <c title="处理navs" pos="15">
场景

navs可以看作是简单的类似于tab的导航栏。一般来说导航栏都是ul+li。先定位ul再去层级定位li中的link基本就能解决问题。

navs.java

    import java.io.File;
    import java.util.List;

    import org.openqa.selenium.By;
    import org.openqa.selenium.Keys;
    import org.openqa.selenium.WebDriver;
    import org.openqa.selenium.WebElement;
    import org.openqa.selenium.chrome.ChromeDriver;


    public class Navs {

        public static void main(String[] args) throws InterruptedException {
            WebDriver dr = new ChromeDriver();

            File file = new File("src/navs.html");
            String filePath = "file:///" + file.getAbsolutePath();
            System.out.printf("now accesss %s \n", filePath);

            dr.get(filePath);
            Thread.sleep(1000);

    //      方法1：层级定位，先定位ul再定位li
            dr.findElement(By.className("nav")).findElement(By.linkText("About")).click();
            Thread.sleep(1000);

    //      方法2: 直接定位link
            dr.findElement(By.linkText("Home")).click();

            Thread.sleep(1000);
            System.out.println("browser will be close");
            dr.quit();  
        }

    }

  	     </c>
  	     <c title="处理面包屑" pos="16">
场景

在实际的测试脚本中，有可能需要处理面包屑。处理面包屑主要是获取其层级关系，以及获得当前的层级。一般来说当前层级都不会是链接，而父层级则基本是以链接，所以处理面包屑的思路就很明显了。找到面包屑所在的div或ul，然后再通过该div或ul找到下面的所有链接，这些链接就是父层级。最后不是链接的部分就应该是当前层级了。

breadcrumb.java

    import java.io.File;
    import java.util.List;

    import org.openqa.selenium.By;
    import org.openqa.selenium.WebDriver;
    import org.openqa.selenium.WebElement;
    import org.openqa.selenium.chrome.ChromeDriver;


    public class Breadcrumb {

        public static void main(String[] args) throws InterruptedException {
            WebDriver dr = new ChromeDriver();

            File file = new File("src/breadcrumb.html");
            String filePath = "file:///" + file.getAbsolutePath();
            System.out.printf("now accesss %s \n", filePath);

            dr.get(filePath);
            Thread.sleep(1000);

    //      获得其父层级
            List&lt;WebElement&gt; ancestors = dr.findElement(By.className("breadcrumb")).findElements(By.tagName("a"));
            for(WebElement link : ancestors){
                System.out.println(link.getText());
            }

    //      获取当前层级
    //      由于页面上可能有很多class为active的元素
    //      所以使用层级定位最为保险
            WebElement current = dr.findElement(By.className("breadcrumb")).findElement(By.className("active"));
            System.out.println(current.getText());

            Thread.sleep(1000);
            System.out.println("browser will be close");
            dr.quit();  
        }

    }

  	     </c>
  	     <c title="处理分页" pos="17">
  	         
场景

对分页来说，我们最感兴趣的是下面几个信息

总共有多少页
当前是第几页
是否可以上一页和下一页
代码

下面的代码演示了如何获取分页的总数以及当前是第几页

pagination.java

    import java.io.File;
    import java.util.List;

    import org.openqa.selenium.By;
    import org.openqa.selenium.WebDriver;
    import org.openqa.selenium.WebElement;
    import org.openqa.selenium.chrome.ChromeDriver;


    public class Pagination {

        public static void main(String[] args) throws InterruptedException {
            WebDriver dr = new ChromeDriver();

            File file = new File("src/pagination.html");
            String filePath = "file:///" + file.getAbsolutePath();
            System.out.printf("now accesss %s \n", filePath);

            dr.get(filePath);
            Thread.sleep(1000);

    //      获得所有分页的数量
    //      -2是因为要去掉上一个和下一个
            int total_pages = dr.findElement(By.className("pagination")).findElements(By.tagName("li")).size() - 2;
            System.out.printf("Total page is %d\n", total_pages);

    //      取当前页面的url以及当前页面是第几页
            WebElement current_page = dr.findElement(By.className("pagination")).findElement(By.className("active"));
            System.out.printf("Current page is %s\n", current_page.getText());

            Thread.sleep(1000);
            System.out.println("browser will be close");
            dr.quit();  
        }

    }
  	     </c>
  	     <c title="处理对话框" pos="18">
场景

页面上弹出的对话框是自动化测试经常会遇到的一个问题。很多情况下这个弹出的对话框是一个iframe，处理起来有点麻烦，需要进行switch_to操作。但现在很多前端框架的对话框都是div形式的，这就让我们的处理变得十分简单了。

处理对话框一般会做下面的一些事情

打开对话框
关闭对话框
操作对话框中的元素
代码

下面的代码演示了如何打开、关闭以及点击对话框中的链接

modal.java

    import java.io.File;
    import java.util.List;

    import org.openqa.selenium.By;
    import org.openqa.selenium.JavascriptExecutor;
    import org.openqa.selenium.Keys;
    import org.openqa.selenium.WebDriver;
    import org.openqa.selenium.WebElement;
    import org.openqa.selenium.chrome.ChromeDriver;
    import org.openqa.selenium.support.ui.ExpectedCondition;
    import org.openqa.selenium.support.ui.WebDriverWait;

    public class Modal {

        public static void main(String[] args) throws InterruptedException {
            WebDriver dr = new ChromeDriver();

            File file = new File("src/modal.html");
            String filePath = "file:///" + file.getAbsolutePath();
            System.out.printf("now accesss %s \n", filePath);

            dr.get(filePath);
            Thread.sleep(1000);

    //      打开对话框
            dr.findElement(By.id("show_modal")).click();

            (new WebDriverWait(dr, 10)).until(
                    new ExpectedCondition&lt;Boolean&gt;() {
                        public Boolean apply(WebDriver d) {
                            return d.findElement(By.id("myModal")).isDisplayed();
                        }
                    }
            );

    //       点击对话框中的链接
    //       由于对话框中的元素被蒙板所遮挡，直接点击会报 Element is not clickable的错误
    //       所以使用js来模拟click
    //       在watir-webdriver中只需要fire_event(:click)就可以了
            WebElement link = dr.findElement(By.id("myModal")).findElement(By.id("click"));
            ((JavascriptExecutor)dr).executeScript("$(arguments[0]).click()", link);

            Thread.sleep(1000);
            System.out.println("browser will be close");
            dr.quit();  
        }
    }

  	     </c>
  	     <c title="获取测试对象的属性及内容" pos="19">
场景

获取测试对象的内容是前端自动化测试里一定会使用到的技术。比如我们要判断页面上是否显示了一个提示，那么我们就需要找到这个提示对象，然后获取其中的文字，再跟我们的预期进行比较。在webdriver中使用element.getAttribute()方法可以获取dom元素(测试对象)的属性。

获取测试对象的属性能够帮我们更好的进行对象的定位。比如页面上有很多class都是'btn'的div，而我们需要定位其中1个有具有title属性的div。由于selenium-webdriver是不支持直接使用title来定位对象的，所以我们只能先把所有class是btn的div都找到，然后遍历这些div，获取这些div的title属性，一旦发现具体title属性的div，那么返回这个div既可。在webdriver中，使用element.getText()方法可以返回dom节点的内容(text)。

代码

下面的代码演示了如何获取测试对象的title属性和该对象的文字内容

attribute.java

    import java.io.File;
    import java.util.List;

    import org.openqa.selenium.By;
    import org.openqa.selenium.WebDriver;
    import org.openqa.selenium.WebElement;
    import org.openqa.selenium.chrome.ChromeDriver;


    public class Attribute {

        public static void main(String[] args) throws InterruptedException {
            WebDriver dr = new ChromeDriver();

            File file = new File("src/attribute.html");
            String filePath = "file:///" + file.getAbsolutePath();
            System.out.printf("now accesss %s \n", filePath);

            dr.get(filePath);
            Thread.sleep(1000);

            WebElement link = dr.findElement(By.id("tooltip"));

    //      获得tooltip的内容
            System.out.println(link.getAttribute("data-original-title"));

    //      获取该链接的text
            System.out.println(link.getText());

            Thread.sleep(1000);
            System.out.println("browser will be close");
            dr.quit();  
        }

    }
  	     </c>
  	     <c title="获取测试对象的css属性" pos="20">
场景

当你的测试用例纠结细枝末节的时候，你就需要通过判断元素的css属性来验证你的操作是否达到了预期的效果。比如你可以通过判断页面上的标题字号以字体来验证页面的显示是否符合预期。当然，这个是强烈不推荐的。因为页面上最不稳定的就是css了，css变动频繁，而且通过属性也不能直观的判断页面的显示效果，还不如让人为的去看一眼，大问题一望即知。

代码

下面的代码演示了如何获取测试对象的css属性。

css.java

    import java.io.File;
    import java.util.List;

    import org.openqa.selenium.By;
    import org.openqa.selenium.WebDriver;
    import org.openqa.selenium.WebElement;
    import org.openqa.selenium.chrome.ChromeDriver;


    public class Css {

        public static void main(String[] args) throws InterruptedException {
            WebDriver dr = new ChromeDriver();

            File file = new File("src/css.html");
            String filePath = "file:///" + file.getAbsolutePath();
            System.out.printf("now accesss %s \n", filePath);

            dr.get(filePath);
            Thread.sleep(1000);

            WebElement link = dr.findElement(By.id("tooltip"));

            System.out.println(link.getCssValue("color"));

            System.out.println(dr.findElement(By.tagName("h3")).getCssValue("font"));

            Thread.sleep(1000);
            System.out.println("browser will be close");
            dr.quit();  
        }

    }
  	     </c>
  	     <c title="获取测试对象的状态" pos="21">
 场景

在web自动化测试中，我们需要获取测试对象的四种状态

是否显示。使用element.isDisplayed()方法；
是否存在。使用findElement方法，捕获其抛出的异常，如果是NoSuchElementException的话则可以确定该元素不存在；
是否被选中。一般是判断表单元素，比如radio或checkbox是否被选中。使用element.isSelected()方法；
是否enable，也就是是否是灰化状态。使用element.isEnabled()方法；
代码

status.java

    import java.io.File;
    import java.util.List;

    import org.openqa.selenium.By;
    import org.openqa.selenium.JavascriptExecutor;
    import org.openqa.selenium.NoSuchElementException;
    import org.openqa.selenium.WebDriver;
    import org.openqa.selenium.WebElement;
    import org.openqa.selenium.chrome.ChromeDriver;


    public class Status {

        public static void main(String[] args) throws InterruptedException {
            WebDriver dr = new ChromeDriver();

            File file = new File("src/status.html");
            String filePath = "file:///" + file.getAbsolutePath();
            System.out.printf("now accesss %s \n", filePath);

            dr.get(filePath);
            Thread.sleep(1000); 

            WebElement textField = dr.findElement(By.name("user"));
            System.out.println(textField.isEnabled());

    //      直接用isEnabled方法去判断该button的话返回的会是true
    //      这是因为button是使用css方法去disabled的，并不是真正的disable
    //      这时候需要判断其class里是否有disabled这值来判断其是否处于disable状态
            System.out.println(dr.findElement(By.className("btn")).isEnabled());

    //      隐藏掉textField
    //      判断其是否显示
            ((JavascriptExecutor)dr).executeScript("$(arguments[0]).hide()", textField);
            System.out.println(textField.isDisplayed());

    //      使用click方法选择raido
            WebElement radio = dr.findElement(By.name("radio"));
            radio.click();
            System.out.println(radio.isSelected());

            try{
                dr.findElement(By.id("none"));
            } catch(NoSuchElementException e){
                System.out.println("element does not exist");
            }

            Thread.sleep(1000);
            System.out.println("browser will be close");
            dr.quit();  
        }

    }


讨论

在这里我们遇到了一种情况，那就是测试对象看上去是disabled，但是使用enabled方法却返回true。这时候一般思路是判断该对象的css属性或class，通过这些值去进一步判断对象是否disable。
  	     </c>
  	     <c title="form的操作" pos="22">
场景

表单对象的操作比较简单，只需要记住下面几点

使用sendKeys方法往多行文本框和单行文本框赋值；
使用click方法选择checkbox
使用click方法选择radio
使用click方法点击button
使用click方法选择option，从而达到选中select下拉框中某个具体菜单项的效果
代码

Form.java

    import java.io.File;
    import java.util.List;

    import org.openqa.selenium.Alert;
    import org.openqa.selenium.By;
    import org.openqa.selenium.Keys;
    import org.openqa.selenium.WebDriver;
    import org.openqa.selenium.WebElement;
    import org.openqa.selenium.chrome.ChromeDriver;


    public class Form {

        public static void main(String[] args) throws InterruptedException {
            WebDriver dr = new ChromeDriver();

            File file = new File("src/form.html");
            String filePath = "file:///" + file.getAbsolutePath();
            System.out.printf("now accesss %s \n", filePath);

            dr.get(filePath);
            Thread.sleep(1000);

    //      选中checkbox
            dr.findElement(By.cssSelector("input[type=checkbox]")).click();
            Thread.sleep(1000);

    //      选中radio
            dr.findElement(By.cssSelector("input[type=radio]")).click();
            Thread.sleep(1000);

    //      选择下拉菜单中的最后一项
            List&lt;WebElement&gt; options = dr.findElement(By.tagName("select")).findElements(By.tagName("option"));
            options.get(options.size() - 1).click();
            Thread.sleep(1000);

    //      点击提交按钮
            dr.findElement(By.cssSelector("input[type=submit]")).click();

            Alert alert = dr.switchTo().alert();
            System.out.println(alert.getText());
            alert.accept();

            Thread.sleep(1000);
            System.out.println("browser will be close");
            dr.quit();  
        }

    }
  	     </c>
  	     <c title="执行js" pos="23">
场景

如果你熟悉js的话，那么使用webdriver执行js就是一件很高效的事情了。在webdriver脚本中直接执行js的好处很多，这里就不一一枚举了。

webdriver提供了JavascriptExecutor(dr).executeScript()接口来帮助我们完成这一工作。在实际的测试脚本中，以下两种场景是经常遇到的

在页面直接执行一段js
在某个已经定位的元素的上执行js
代码

下面的代码演示了如何在页面以及在已经定位的元素上执行js

js.java

    import java.io.File;
    import java.util.List;

    import org.openqa.selenium.Alert;
    import org.openqa.selenium.By;
    import org.openqa.selenium.JavascriptExecutor;
    import org.openqa.selenium.Keys;
    import org.openqa.selenium.WebDriver;
    import org.openqa.selenium.WebElement;
    import org.openqa.selenium.chrome.ChromeDriver;


    public class Js {

        public static void main(String[] args) throws InterruptedException {
            WebDriver dr = new ChromeDriver();

            File file = new File("src/js.html");
            String filePath = "file:///" + file.getAbsolutePath();
            System.out.printf("now accesss %s \n", filePath);

            dr.get(filePath);
            Thread.sleep(1000);

    //      在页面上直接执行js
            ((JavascriptExecutor)dr).executeScript("$('#tooltip').fadeOut();");
            Thread.sleep(1000);

    //      在已经定位的元素上执行js
            WebElement button = dr.findElement(By.className("btn"));
            ((JavascriptExecutor)dr).executeScript("$(arguments[0]).fadeOut();", button);


            Thread.sleep(1000);
            System.out.println("browser will be close");
            dr.quit();  
        }

    }
  	     </c>
  	     <c title="处理alert/confirm/prompt" pos="24">
场景

webdriver中处理原生的js alert confirm 以及prompt是很简单的。具体思路是使用switch_to.alert()方法定位到alert/confirm/prompt。然后使用text/accept/dismiss/send_keys按需进行操做

getText。返回alert/confirm/prompt中的文字信息
accept。点击确认按钮
dismiss。点击取消按钮，如果有的话
sendKeys。向prompt中输入文字
代码

下面代码简单的演示了如何去处理原生的alert

alert.java

    import java.io.File;
    import java.util.List;
    import org.openqa.selenium.Alert;
    import org.openqa.selenium.By;
    import org.openqa.selenium.JavascriptExecutor;
    import org.openqa.selenium.Keys;
    import org.openqa.selenium.WebDriver;
    import org.openqa.selenium.WebElement;
    import org.openqa.selenium.chrome.ChromeDriver;


    public class AlertExample {

        public static void main(String[] args) throws InterruptedException {
            WebDriver dr = new ChromeDriver();

            File file = new File("src/alert.html");
            String filePath = "file:///" + file.getAbsolutePath();
            System.out.printf("now accesss %s \n", filePath);

            dr.get(filePath);
            Thread.sleep(1000);

    //      点击链接弹出alert
            dr.findElement(By.id("tooltip")).click();

            Alert alert = dr.switchTo().alert();
            alert.accept();

            Thread.sleep(1000);
            System.out.println("browser will be close");
            dr.quit();  
        }

    }
  	     </c>
  	     <c title="wait(等待)" pos="25">
场景

Wait类的使用场景是在页面上进行某些操作，然后页面上就会出现或隐藏一些元素，此时使用WebDriverWait类的until方法来等待这些效果完成以便进行后续的操作。另外页面加载时有可能会执行一些ajax，这时候也需要去WebDriverWait的until的等待ajax的请求执行完毕。

具体一点的例子前面也曾出现过，点击一个链接然后会出现一个下拉菜单，此时需要先等待下拉菜单出现方可进行点击菜单项的操作。

在实例化WebDriverWait类时，有下面2个构造方法

public WebDriverWait(WebDriver driver, long timeOutInSeconds)
public WebDriverWait(WebDriver driver, long timeOutInSeconds, long sleepInMillis)
其参数为

WebDriver driver。不言而喻
long timeOutInSeconds。总体的超时时间，最多等这么久。
long sleepInMillis。每隔多久去检查一次until的结果
另外要注意的是，默认情况下，unitl中的NotFoundException会被忽略，但是其他异常还是正常传播的。你可以通过ignoring(exceptions to add)自己定义需要忽略的异常。

代码

下面代码演示了点击按钮后如何等待label出现。这个例子其实没有前面的下拉菜单例子实用。

wait.java

    import java.io.File;
    import java.util.List;
    import org.openqa.selenium.Alert;
    import org.openqa.selenium.By;
    import org.openqa.selenium.JavascriptExecutor;
    import org.openqa.selenium.Keys;
    import org.openqa.selenium.WebDriver;
    import org.openqa.selenium.WebElement;
    import org.openqa.selenium.chrome.ChromeDriver;
    import org.openqa.selenium.support.ui.ExpectedCondition;
    import org.openqa.selenium.support.ui.WebDriverWait;


    public class WaitExample {

        public static void main(String[] args) throws InterruptedException {
            WebDriver dr = new ChromeDriver();

            File file = new File("src/wait.html");
            String filePath = "file:///" + file.getAbsolutePath();
            System.out.printf("now accesss %s \n", filePath);

            dr.get(filePath);
            Thread.sleep(1000);

    //      点击按钮
            dr.findElement(By.id("btn")).click();

            (new WebDriverWait(dr, 10)).until(new ExpectedCondition&lt;Boolean&gt;() {
                    public Boolean apply(WebDriver d) {
                                            return d.findElement(By.className("label")).isDisplayed();
                                    }
                });

            Thread.sleep(1000);
            System.out.println("browser will be close");
            dr.quit();  
        }

    }
  	     </c>
  	     <c title="定位frame中的元素" pos="26">
场景

处理frame需要用到2个方法，分别是switchTo().frame(element|index|id)和switchTo.defaultContent()

switchTo().frame()方法的参数值得一提。其支持

WebElement， 可以传入一个已经定位的frame元素。如 switchTo().frame(dr.findElement(By.id("myFrame")))
int index， 可以传入页面上frame的索引，如0表示第1个frame
String id, 可以传入frame的id
switchTo().frame()方法把当前定位的主体切换了frame里。怎么理解这句话呢？我们可以从frame的实质去理解。frame中实际上是嵌入了另一个页面，而webdriver每次只能在一个页面识别，因此才需要用switch_to.frame方法去获取frame中嵌入的页面，对那个页面里的元素进行定位。

switchTo.defaultContent方法的话则是从frame中嵌入的页面里跳出，跳回到最外面的原始页面中。

如果页面上只有1个frame的话那么这一切都是很好理解的，但如果页面上有多个frame，情况有稍微有点复杂了。

代码

下面的代码中frame.html里有个id为f1的frame，而f1中又嵌入了id为f2的frame，该frame加载了百度的首页。

frame.java

    import java.io.File;
    import java.util.List;
    import org.openqa.selenium.Alert;
    import org.openqa.selenium.By;
    import org.openqa.selenium.JavascriptExecutor;
    import org.openqa.selenium.Keys;
    import org.openqa.selenium.WebDriver;
    import org.openqa.selenium.WebElement;
    import org.openqa.selenium.chrome.ChromeDriver;
    import org.openqa.selenium.support.ui.ExpectedCondition;
    import org.openqa.selenium.support.ui.WebDriverWait;


    public class Frame {

        public static void main(String[] args) throws InterruptedException {
            WebDriver dr = new ChromeDriver();

            File file = new File("src/frame.html");
            String filePath = "file:///" + file.getAbsolutePath();
            System.out.printf("now accesss %s \n", filePath);

            dr.get(filePath);
            Thread.sleep(1000);

    //       先到f1再到f2
            dr.switchTo().frame("f1");
            dr.switchTo().frame("f2");
    //      往f2中的百度关键字文本框中输入内容
            dr.findElement(By.id("kw")).sendKeys("watir-webdriver");
            Thread.sleep(1000);

    //      直接跳出所有frame
            dr.switchTo().defaultContent();

    //      再到f1
            dr.switchTo().frame("f1");
            dr.findElement(By.linkText("click")).click();

            Thread.sleep(1000);
            System.out.println("browser will be close");
            dr.quit();  
        }

    }

讨论

假设页面上有A、B两个frame，其中B在A内，那么定位B中的内容则需要先到A，然后再到B。如果是定位A中的内容，那么直接switch_to.frame('A')就可以了;

页面中使用frame会影响页面渲染速度，如果你遇到页面中有多个frame的情况，你完全可以提出1个页面前端性能的缺陷;

如果实在搞不定页面上的frame，送你一句歌词：也许放弃才能靠近你。那么及时放弃跟此frame相关的用例才是明智之举;
  	     </c>
  	     <c title="action" pos="27">
场景

由于webdriver是要模拟真实的用户操作，因此webdriver的Action类中提供了很多与操作有关的方法。

下面列举一下Action类的一些主要方法

keyDown。模拟按键按下
keyUp。模拟按键弹起
click
sendKeys
doubleClick。鼠标左键双击
clickAndHold。鼠标左键点击住不放
release。鼠标左键弹起，可以与click_and_hold配合使用
moveToElement。把鼠标移动到元素的中心点
contextClick。鼠标右键点击
dragAndDrop。拖拽
代码

Actions action = new Actions(driver)
action.keyDown(Keys.SHIFT).
              click(element).
              click(second_element).
              keyUp(Keys.SHIFT).
              dragAndDrop(element, third_element).
                            build().
              perform()
讨论

具体使用方法可以参考api文档。action的api文档算是比较全面了。
  	     </c>
  	     <c title="上传文件" pos="28">
场景

上传文件的方法是找到上传文件的对象，通常是的对象。然后直接往这个对象sendKeys，传入需要上传文件的正确路径。绝对路径和相对路径都可以，但是上传的文件必须存在，否则会报错。

代码

upload_file.java

    import java.io.File;
    import java.util.List;

    import org.openqa.selenium.Alert;
    import org.openqa.selenium.By;
    import org.openqa.selenium.Keys;
    import org.openqa.selenium.WebDriver;
    import org.openqa.selenium.WebElement;
    import org.openqa.selenium.chrome.ChromeDriver;


    public class Upload {

        public static void main(String[] args) throws InterruptedException {
            WebDriver dr = new ChromeDriver();

            File file = new File("src/upload_file.html");
            String filePath = "file:///" + file.getAbsolutePath();
            System.out.printf("now accesss %s \n", filePath);

            dr.get(filePath);
            Thread.sleep(1000);

            dr.findElement(By.cssSelector("input[type=file]")).sendKeys("src/navs.html");

            Thread.sleep(1000);
            System.out.println("browser will be close");
            dr.quit();  
        }

    }
  	     </c>
  	     <c title="下载" pos="29">
  	         
场景

webdriver允许我们设置默认的文件下载路径。也就是说文件会自动下载并且存在设置的那个目录中。

下面会给出firefox浏览器的具体设置方法。

代码

  driver = Selenium::WebDriver.for :chrome, :profile => profile

  # for firefox 
  FirefoxProfile firefoxProfile = new FirefoxProfile();

  firefoxProfile.setPreference("browser.download.folderList",2);
  firefoxProfile.setPreference("browser.download.manager.showWhenStarting",false);
  firefoxProfile.setPreference("browser.download.dir","c:\\downloads");
  firefoxProfile.setPreference("browser.helperApps.neverAsk.saveToDisk","text/csv");

  WebDriver driver = new FirefoxDriver(firefoxProfile);
  //new RemoteWebDriver(new URL("http://localhost:4444/wd/hub"), capability);

  driver.navigate().to("http://www.myfile.com/hey.csv");
  	         
  	     </c>
  	     <c title="超时设置" pos="30">
  	         
场景

webdriver中可以设置很多的超时时间

implicitlyWait。识别对象时的超时时间。过了这个时间如果对象还没找到的话就会抛出NoSuchElement异常
setScriptTimeout。异步脚本的超时时间。webdriver可以异步执行脚本，这个是设置异步执行脚本脚本返回结果的超时时间
pageLoadTimeout。页面加载时的超时时间。因为webdriver会等页面加载完毕在进行后面的操作，所以如果页面在这个超时时间内没有加载完成，那么webdriver就会抛出异常
代码

  # 定位对象时给3s的时间
  # 如果3s内还定位不到则抛出异常
  driver.manage().timeouts().implicitlyWait(3, TimeUnit.SECONDS);

  # 页面加载超时时间设置为5s
  dr.manage().timeouts().pageLoadTimeout(5, TimeUnit.SECONDS);

  # 异步脚本的超时时间设置成3s 
  dr.manage().timeouts().setScriptTimeout(3, TimeUnit.SECONDS);
  	     </c>
  	     <c title="Remote Webdriver" pos="31">

场景

简单来说，我们可以把remote webdriver理解成在远程机器上运行webdriver脚本。

想像一下最简单的一个应用场景：你和你的同事两人一起开发一段webdriver脚本，然后你们需要在一个公共的环境去运行这段脚本。为什么要在公共的环境运行？那是因为每个人的开发机器是有差异的，但是如果用同一台测试机的话，那么环境差异的因素就可以基本排除。我们应该经常听到开发说这样的话:"这个bug在我的环境上是好的啊！"。因为运行环境不同而造成的bug比比皆是，因此我们需要一个统一的运行环境来消除差异。

在这样的应用场景下，我们就需要使用remote webdriver，我们在本地开发脚本，然后调用remote webdriver，在测试机器上执行我们的测试。

安装

Remote Webdriver的安装很简单。

首先下载selenium-server-standalone-LAST-VERSION.jar。

然后运行java -jar selenium-server-standalone.jar命令。如果没有错误出现的话，这台机器已经被配置成远程机器了，以后webdriver就会在这台机器上启动浏览器，执行脚本。 

启动driver

java版本

    // We could use any driver for our tests...
    DesiredCapabilities capabilities = new DesiredCapabilities();

    // ... but only if it supports javascript
    capabilities.setJavascriptEnabled(true);

    // Get a handle to the driver. This will throw an exception
    // if a matching driver cannot be located
    WebDriver driver = new RemoteWebDriver(capabilities);

    // Query the driver to find out more information
    Capabilities actualCapabilities = ((RemoteWebDriver) driver).getCapabilities();

    // And now use it
    driver.get("http://www.google.com");
注意，java版本的代码没有时间去调试，这里只是把wiki上的代码放出来而已。另外remote server在发生错误时会自动截图，下面是获得截图的代码

    public String extractScreenShot(WebDriverException e) {
        Throwable cause = e.getCause();
        if (cause instanceof ScreenshotException) {
            return ((ScreenshotException) cause).getBase64EncodedScreenshot();
        }
        return null;
    }
 	  </c>
    </java>
